TYPESCRIPT:
- Typescript is a programming language developed and maintained by maintained by Microsoft.
- It is a strict syntactical superset of the JavaScript and adds optional static typing to the language.

// HOW DOES TS CODE RUNS??
- TYPESCRIPT code never runs in your browser as your browser only understands JavaScript.
- JavaScript is a runtime language(the thing that actually runs in your browser / node.js runtime)
- Typescript is something that compiler down to JavaScript.
- When Typescript is transpiled down to JavaScript, you get type checking errors. If there is error converion to JS fails.


//commands
npm i -g typescript     //install ts globally
npm init -y             //create package.json
tsc --init              //ts.config is created
tsc -b                  //to compile .ts to .js

//Types in TS
-  number
- string
- boolean 
- null
- undefined

//tsconfig 
- target : The target option in transfig.json specifies the ECMAScript target version to which TS compiler will compile the TS code.
- rootDir : Where the compiler should look for the .ts files
- outDir : Where the compiler should spit out the .js files
- noImplicitType : You can set it to false to make it slightly less strict
- removeComments: if true, comments of .ts files will be removed from .js files

//INTERFACES
interface User{
    firstName : string;
    lastName : string;
    email ?: string;
    age: number;
}

//Implementing INTERFACES
- Interfaces have another special property that you can implement interfaces as a class.
- lets say u have a interface Person
        interface Person{
            name: string;
            age: number;
            greet(phrases: string) : void;
        }
  You can reae a class which implements this interface

    class Employee implements Person{
        name: string;
        age: number;

        constructor(n: string, a: number){
            this.name = n;
            this.age = a;
        }

        greet(phrases: string){
            console.log(`${phrase} ${this.name}`);
        }
    }

- Difference between types and interface :- Interfaces can be implemented in classes 

//TYPES 
- very similar to interfaces, types lets you aggregate data together.

type User = {
    firstName: string;
    lastName: string;
    age: number;
}
 
- Interfaces can be used to implement classes.
- Types can not be used to implement classes. But they let you do few extra things:
    1. Union: Lets say tou want to print id of user which can be number or string for this we use types.
        type StringorNumber = string | number ;
        function printId(id: StringorNumber){
            console.log(${id});
        }
        printId(101);
        printId("101");

    2. Intersection: What if you wany to create a type that has every property of multiple types/interfaces.
    (You can not do this using interfaces)
        type Employee = {
            name: string;
            start_date: Date;
        }

        interface Manager{
            name: string;
            department: string;
        }

        type TeamLead = Employee & Manager;

        const teamLead: TeamLead = {
            name: "harkirat",
            start_date: new Date(),
            department: "Software Engineer"
        };

//Arrays
if you want to access arrays in typescript, its as simple as adding a [] annotation next to the type.
 example: Given an array of positive integers as input return max value;
    function maxValue(arr: number[]): number {
        let maxi = 0;
        for(let i=0; i<arr.length; i++){
            if(arr[i]>maxi){
                maxi = arr[i];
            }
        }
        return maxi;
    }

//Enums : Enums in typescript are a feature that allows you to define a set of named constants. The concept behind enumerations is to create a human readable way to represent a set of constant values which might otherwise be represented as a string or number.
    example: Suppose you have to create a game where user has to press up , down, left, or right arrow keys. what should be their type? string or number? The best way to represent them is enum.

    enum Direction{
        Up,
        Down,
        Left,
        Right
    }
    the final value stored in runtme is still 0,1,2,3.

    to get up, down, left, right in runtime also we need to specify in all
    enum Direction{
        Up = "up",
        Down = "down",
        Left = "left",
        Right = "right"
    }
- Enums does not exist in JavaScript it is virtual concept. 
